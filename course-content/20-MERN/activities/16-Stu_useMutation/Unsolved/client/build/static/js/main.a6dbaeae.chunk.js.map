{"version":3,"sources":["components/ThoughtList/index.js","utils/mutations.js","components/ThoughtForm/index.js","utils/queries.js","pages/Home.js","components/Header/index.js","components/Footer/index.js","App.js","reportWebVitals.js","index.js"],"names":["ThoughtList","thoughts","title","length","map","thought","className","thoughtAuthor","style","fontSize","createdAt","thoughtText","_id","ADD_THOUGHT","gql","ThoughtForm","useState","formState","setFormState","characterCount","setCharacterCount","useMutation","addThought","error","handleFormSubmit","event","preventDefault","variables","data","window","location","reload","console","handleChange","target","name","value","onSubmit","placeholder","onChange","type","QUERY_THOUGHTS","Home","useQuery","loading","border","Header","Footer","role","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6dbaeae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ThoughtList = ({ thoughts, title }) => {\r\n  if (!thoughts.length) {\r\n    return <h3>No Thoughts Yet</h3>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>{title}</h3>\r\n      {thoughts &&\r\n        thoughts.map((thought) => (\r\n          <div key={thought._id} className=\"card mb-3\">\r\n            <h4 className=\"card-header bg-primary text-light p-2 m-0\">\r\n              {thought.thoughtAuthor} <br />\r\n              <span style={{ fontSize: '1rem' }}>\r\n                had this thought on {thought.createdAt}\r\n              </span>\r\n            </h4>\r\n            <div className=\"card-body bg-light p-2\">\r\n              <p>{thought.thoughtText}</p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThoughtList;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ADD_THOUGHT = gql`\r\n  mutation addThought($thoughtText: String!, $thoughtAuthor: String!) {\r\n    addThought(thoughtText: $thoughtText, thoughtAuthor: $thoughtAuthor) {\r\n      _id\r\n      thoughtText\r\n      thoughtAuthor\r\n      createdAt\r\n      comments {\r\n        _id\r\n        commentText\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\n// TODO: Add code to import necessary hook from Apollo Client\r\nimport {useMutation} from '@apollo/client'\r\n\r\nimport { ADD_THOUGHT } from '../../utils/mutations';\r\n\r\nconst ThoughtForm = () => {\r\n  const [formState, setFormState] = useState({\r\n    thoughtText: '',\r\n    thoughtAuthor: '',\r\n  });\r\n  const [characterCount, setCharacterCount] = useState(0);\r\n\r\n  // TODO: Add code to set up mutation\r\n  const [addThought, { error }] = useMutation(ADD_THOUGHT);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      // TODO: Add code to execute asynchronous mutation function returned by `useMutation()` hook and pass in `formState` object\r\n\r\n      const { data } = await addThought({\r\n        variables: { ...formState },\r\n      });\r\n      window.location.reload();\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    if (name === 'thoughtText' && value.length <= 280) {\r\n      setFormState({ ...formState, [name]: value });\r\n      setCharacterCount(value.length);\r\n    } else if (name !== 'thoughtText') {\r\n      setFormState({ ...formState, [name]: value });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>What's on your techy mind?</h3>\r\n\r\n      <p\r\n        className={`m-0 ${\r\n          characterCount === 280 || error ? 'text-danger' : ''\r\n        }`}\r\n      >\r\n        Character Count: {characterCount}/280\r\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\r\n      </p>\r\n      <form\r\n        className=\"flex-row justify-center justify-space-between-md align-center\"\r\n        onSubmit={handleFormSubmit}\r\n      >\r\n        <div className=\"col-12\">\r\n          <textarea\r\n            name=\"thoughtText\"\r\n            placeholder=\"Here's a new thought...\"\r\n            value={formState.thoughtText}\r\n            className=\"form-input w-100\"\r\n            onChange={handleChange}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"col-12 col-lg-9\">\r\n          <input\r\n            name=\"thoughtAuthor\"\r\n            placeholder=\"Add your name to get credit for the thought...\"\r\n            value={formState.thoughtAuthor}\r\n            className=\"form-input w-100\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-12 col-lg-3\">\r\n          <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\r\n            Add Thought\r\n          </button>\r\n        </div>\r\n        {error && (\r\n          <div className=\"col-12 my-3 bg-danger text-white p-3\">\r\n            Something went wrong...\r\n          </div>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThoughtForm;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_THOUGHTS = gql`\r\n  query getThoughts {\r\n    thoughts {\r\n      _id\r\n      thoughtText\r\n      thoughtAuthor\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport ThoughtList from '../components/ThoughtList';\r\nimport ThoughtForm from '../components/ThoughtForm';\r\n\r\nimport { QUERY_THOUGHTS } from '../utils/queries';\r\n\r\nconst Home = () => {\r\n  const { loading, data } = useQuery(QUERY_THOUGHTS);\r\n  const thoughts = data?.thoughts || [];\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"flex-row justify-center\">\r\n        <div\r\n          className=\"col-12 col-md-10 mb-3 p-3\"\r\n          style={{ border: '1px dotted #1a1a1a' }}\r\n        >\r\n          <ThoughtForm />\r\n        </div>\r\n        <div className=\"col-12 col-md-8 mb-3\">\r\n          {loading ? (\r\n            <div>Loading...</div>\r\n          ) : (\r\n            <ThoughtList\r\n              thoughts={thoughts}\r\n              title=\"Some Feed for Thought(s)..d.\"\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"bg-primary text-light mb-4 py-3 flex-row align-center\">\r\n      <div className=\"container flex-row justify-space-between-lg justify-center align-center\">\r\n        <h1 className=\"m-0\">Tech Thoughts</h1>\r\n        <p className=\"m-0\">Get into the mind of a programmer.</p>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"w-100 mt-auto bg-secondary p-4\">\r\n      <div className=\"container text-center mb-5\">\r\n        <h4>\r\n          Made with{' '}\r\n          <span\r\n            className=\"emoji\"\r\n            role=\"img\"\r\n            aria-label=\"heart\"\r\n            aria-hidden=\"false\"\r\n          >\r\n            ❤️\r\n          </span>{' '}\r\n          by the Tech Thoughts team.\r\n        </h4>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\n\r\nimport Home from './pages/Home';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\n\r\nconst client = new ApolloClient({\r\n  uri: '/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <div className=\"flex-column justify-flex-start min-100-vh\">\r\n        <Header />\r\n        <div className=\"container\">\r\n          <Home />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}